name: Build and Deploy VRChat Photo Uploader

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install PyInstaller
      run: |
        pip install pyinstaller

    - name: Build executable with PyInstaller
      run: |
        pyinstaller --onefile --noconsole --icon=icon.ico main.py

    - name: Rename main.exe to VRChat Photo Uploader.exe
      run: |
        cd dist
        Rename-Item "main.exe" "VRChat Photo Uploader.exe"

    - name: Install Inno Setup
      run: |
        curl -L -o isetup.exe "https://jrsoftware.org/download.php/is.exe"
        Start-Process -FilePath isetup.exe -ArgumentList '/VERYSILENT', '/SUPPRESSMSGBOXES', '/NORESTART' -NoNewWindow -Wait

    - name: Generate installer with Inno Setup
      run: |
        Start-Process -FilePath "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" -ArgumentList "VRChatPhotoUploaderSetup.iss" -NoNewWindow -Wait

    - name: Upload Setup.exe as artifact
      uses: actions/upload-artifact@v3
      with:
        name: Setup.exe
        path: Output/VRChatPhotoUploaderSetup.exe

  deploy:
    runs-on: ubuntu-latest
    needs: build
  
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.GH_PAT }}  # Use the PAT for authentication
  
    - name: Download Setup.exe artifact
      uses: actions/download-artifact@v3
      with:
        name: Setup.exe
        path: ./Output
  
    - name: Read version from file
      id: read_version
      run: |
        VERSION=$(cat version.txt)
        echo "Version: $VERSION"
        echo "version=$VERSION" >> $GITHUB_ENV
  
    - name: Configure Git user
      run: |
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
  
    - name: Create a version tag
      run: |
        git tag ${{ env.version }}
        git push origin ${{ env.version }}
  
    - name: Create GitHub release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_PAT }}  # Use the PAT here
      with:
        tag_name: ${{ env.version }}
        release_name: "VRChat Photo Uploader ${{ env.version }}"
        body: "This is the latest release of VRChat Photo Uploader."
        draft: false
        prerelease: false
  
    - name: Upload Setup.exe to release
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./Output/VRChatPhotoUploaderSetup.exe
        asset_name: VRChatPhotoUploaderSetup.exe
        asset_content_type: application/octet-stream
